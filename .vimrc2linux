"common conf {{             通用配置
syn on                      "语法支持
set ai                      "自动缩进
set bs=2                    "在insert模式下用退格键删除
set showmatch               "代码匹配
"自动配对的括号前景和背景颜色自定义
hi MatchParen ctermbg=blue ctermfg=red
set showcmd                 "显示输入命令
set mouse=a                 "鼠标控制

"状态栏显示设置
"{{
set laststatus=0            "总是不显示状态行
set ruler                   "右下角显示ruler
set rulerformat=%37(%r%M%t\ %l\,%v%=%p%%%)
"}}

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set nocompatible
set t_Co=256
"开启光亮光标行
set cursorline
set number                  "显示行号
set autoread                "文件在Vim之外修改过，自动重新读入
set autowriteall            "自动保存
set nobackup                " 不要备份文件（根据自己需要取舍） 
setlocal noswapfile         " 不要生成swap文件，当buffer被丢弃的时候隐藏它 
set bufhidden=hide
set autoindent              "Indention for file
"设置光标位置
set scrolloff=8


"设置','为leader快捷键
"{{
let mapleader = "'"
let g:mapleader = "'"
"}}
"
set ignorecase              "检索时忽略大小写
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gbk       "使用utf-8或者gbk或者cp936打开文件
"使用utf-8或者gbk或者cp936打开文件
set fileencoding=utf-8
set hls                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
set confirm                 "在处理未保存或只读文件的时候，弹出确认
"空格控制折叠
set foldenable              "代码折叠
set foldmethod=syntax       "根据语法折叠
set foldlevel=100           "少于100行不折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR> "空格控制折叠

"scheme solarized
execute pathogen#infect()
syntax enable
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

"创建键盘映射
"禁用方向键
"inoremap <Up> <Nop>
"inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
"保存名映射到b
nmap <leader>b :wq<CR>
"退出
nmap <leader>y :q<CR>
"下移动半个屏幕
nmap <S-x> <C-d>
"上移半个屏幕
nmap <S-z> <C-u>
"退回normal模式
imap <leader>/ <ESC>
imap `<Tab> <ESC>
"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
nnoremap <Tab>n gt
nnoremap <Tab>m gT
nnoremap <leader>t :tabe 
"分屏设置
"竖屏
nnoremap 'f :sp<CR>
"横屏
nnoremap 'v :vs<CR>
"分屏切换
nnoremap <S-h> <C-w>h
nnoremap <S-l> <C-w>l
nnoremap <S-j> <C-w>j
nnoremap <S-k> <C-w>k
"copy into sys clip-board
"set clipboard=unnamedplus
"vmap <C-c> "+y
"nnoremap <C-v> "+p
"insert model jump
imap \] <S-Right>
imap \[ <S-Left>
imap \\ <HOME>
imap `j <DOWN>
imap `k <UP>

"set guifont=Courier_New:h10:cANSI    "设置字体,Windows中格式为set
"guifont=Consolas:h11，在Linux中格式为set guifont=Consolas\ 11
" Set font according to system

"pathogen是Vim用来管理插件的插件{
execute pathogen#infect()
filetype plugin indent on
"}

"NERD_tree{
"autocmd vimenter * NERDTree
"设置快捷键
nnoremap <F2> :NERDTreeToggle<CR>
"打开文件后关闭nerdtree
let NERDTreeQuitOnOpen=1
let NERDTreeShowBookmarks=1
let NERDTreeWinSize=20
"nmap <F7> :NERDTreeMapOpenInTab<CR>
"nmap <C-q> :NERDTreeFind<CR>
"}

"taglist{
let Tlist_Ctags_Cmd = '/usr/bin/ctags'  "设置ctags命令的位置
set tags+=~/.vim/systags/tags   "ctags -R -f ~/.vim/systags /usr/include /usr/local/include
set tags+=./tags    "tags位置设置
set autochdir
let Tlist_Show_One_File = 1  "只显示当前文件的taglist，默认是显示多个
let Tlist_Exit_OnlyWindow = 1  "如果taglist是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist
let Tlist_GainFocus_On_ToggleOpen = 1  "打开taglist时，光标保留在taglist窗口
let Tlist_WinWidth=20
nnoremap <F3> :Tlist<CR>
"设置关闭和打开taglist窗口的快捷键
nnoremap <S-a> <C-]>
nnoremap <S-s> <C-t>
"}

"new-omni-completion设置自动补全功能{
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set completeopt=menu,menuone,longest,preview "optional
let g:pydiction_location='/home/edony/.vim/bundle/pydiction'
"Omni menu colors
highlight Pmenu ctermbg=darkgrey  ctermfg=black
highlight PmenuSel ctermbg=lightgrey ctermfg=black
"key map
imap <C-j> <C-n>
imap <C-k> <C-p>
"}

"delimitMate启用{
"括号自动配对
let delimitMate_expand_cr=1
"}

"bufexplorer{
let g:bufExplorerDetailedHelp=1      " Show detailed help.
let g:bufExplorerShowDirectories=1   " Show directories.
let g:bufExplorerSplitBelow=1        " Split new window below current.
nmap <F4> :BufExplorerHorizontalSplit<CR>
"}

"conque_term{
let g:ConqueTerm_Color = 1
function Debug()
    :below 5split
    :ConqueTerm bash
endfunction
nmap <F5> :call Debug()<CR>
"}

"instant-markdown{
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
"}

"Vim Lisp Environment(slimv) for Linux{
let g:slimv_swank_cmd = '! xterm -e sbcl --load /home/edony/.vim/bundle/slimv/slime/start-swank.lisp &'
"}

"pyflakes-vim{
let g:pyflakes_use_quickfix = 1
"}

"SimpylFold{
set foldmethod=indent
set foldlevel=99
let g:SimpylFold_docstring_preview = 1
autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
"}

"Racket&Scheme{
if has("autocmd")
    au BufReadPost *.rkt,*.rktl set filetype=scheme
endif
if has("autocmd")
    au BufReadPost *.rkt,*.rktl set filetype=racket
    au filetype racket set lisp
    au filetype racket set autoindent
endif

"Copy Right Declaration
"Add and Update the title
"for C/C++
map <F6> :call CTitleDet()<cr>
"for Python
map <F7> :call PyTitleDet()<CR>
"for lua
map <F8> :call LuaTitleDet()<CR>

function PyImport()
    call append(26,"#import scipy as sp")
    call append(27,"#import math as m")
    call append(28,"#import matplotlib as mpl")
    call append(29,"#import matplotlib.pyplot as plt")
    call append(30,"#from mpl_toolkits.mplot3d import Axes3D as Ax3")
    call append(31,"#from scipy import stats as st")
    call append(32,"#from matplotlib import cm")
    call append(33,"#import numpy as np")
    call append(34,"")
endfunction
function PyColor()
    call append(35,"class PyColor(object):")
    call append(36,"    \"\"\" This class is for colored print in the python interpreter!")
    call append(37,"    \"F3\" call Addpy() function to add this class which is defined")
    call append(38,"    in the .vimrc for vim Editor.\"\"\"")
    call append(39,"    def __init__(self):")
    call append(40,"        self.self_doc = r\"\"\"")
    call append(41,"        STYLE: \\033['display model';'foreground';'background'm")
    call append(42,"        DETAILS:")
    call append(43,"        FOREGROUND        BACKGOUND       COLOR")
    call append(44,"        ---------------------------------------")
    call append(45,"        30                40              black")
    call append(46,"        31                41              red")
    call append(47,"        32                42              green")
    call append(48,"        33                43              yellow")
    call append(49,"        34                44              blue")
    call append(50,"        35                45              purple")
    call append(51,"        36                46              cyan")
    call append(52,"        37                47              white")
    call append(53,"        DISPLAY MODEL    DETAILS")
    call append(54,"        -------------------------")
    call append(55,"        0                default")
    call append(56,"        1                highlight")
    call append(57,"        4                underline")
    call append(58,"        5                flicker")
    call append(59,"        7                reverse")
    call append(60,"        8                non-visiable")
    call append(61,"        e.g:")
    call append(62,"        \\033[1;31;40m   <!--1-highlight;31-foreground red;40-background black-->")
    call append(63,"        \\033[0m         <!--set all into default-->")
    call append(64,"        \"\"\"")
    call append(65,"        self.warningcolor = '\\033[0;31m'")
    call append(66,"        self.tipcolor = '\\033[0;32m'")
    call append(67,"        self.endcolor = '\\033[0m'")
    call append(68,"        self._newcolor = ''")
    call append(69,"    @property")
    call append(70,"    def new(self):")
    call append(71,"        \"\"\"")
    call append(72,"        Customized Python Print Color.")
    call append(73,"        \"\"\"")
    call append(74,"        return self._newcolor")
    call append(75,"    @new.setter")
    call append(76,"    def new(self, color_str):")
    call append(77,"        \"\"\"")
    call append(78,"        New Color.")
    call append(79,"        \"\"\"")
    call append(80,"        self._newcolor = color_str")
    call append(81,"    def disable(self):")
    call append(82,"        \"\"\"")
    call append(83,"        Disable Color Print.")
    call append(84,"        \"\"\"")
    call append(85,"        self.warningcolor = ''")
    call append(86,"        self.endcolor = ''")
    call append(87,"")
endfunction
"判断前20行代码里面，是否有Last modified这个单词，
"如果没有的话，代表没有添加过作者信息，需要新添加；
"如果有的话，那么只需要更新即可
function CTitleDet()
    let n=11
    "默认为添加
    while n < 23
        let line = getline(n)
        if line =~ '^\ #\s*\S*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n=n+1
    endwhile
    call CTitle()
endfunction
function PyTitleDet()
    let n=11
    "默认为添加
    while n < 23
        let line = getline(n)
        if line =~ '^\ #\s*\S*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n=n+1
    endwhile
    call PyTitle()
    call PyImport()
    call PyColor()
endfunction
function LuaTitleDet()
    let n=11
    "默认为添加
    while n < 23
        let line = getline(n)
        if line =~ '^\ #\s*\S*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n=n+1
    endwhile
    call LuaTitle()
endfunction
"更新最近修改时间和文件名
function UpdateTitle()
    normal m'
    execute '/# *Last modified:/s@:.*$@\=strftime(":\t%Y-%m-%d %H:%M")@'
    normal ''
    normal mk
    execute '/# *Filename:/s@:.*$@\=":\t\t".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction
function PyTitle()
    call append(0,"#!/usr/bin/env python3")
    call append(1,"# -*- coding: utf-8 -*-")
    call append(2,"r\"\"\"")
    call append(3," #        .---.         .-----------")
    call append(4," #       /     \\  __  /    ------")
    call append(5," #      / /     \\(  )/    -----   (`-')  _ _(`-')              <-. (`-')_")
    call append(6," #     //////    '\\/ `   ---      ( OO).-/( (OO ).->     .->      \\( OO) )     .->")
    call append(7," #    //// / //  \:   \: ---      (,------. \\    .'_ (`-')----. ,--./ ,--/  ,--.'  ,-.")
    call append(8," #   // /   /  / `\\/ \'--         |  .---' '`'-..__)( OO).-. ' |   \\ |  | (`-')'.'  /")
    call append(9," #  //          //\.\.\\\\          (|  '--.  |  |  ' |( _) | | | |  . '|  |)(OO \\    /")
    call append(10," # ============UU====UU====      |  .--'  |  |  / : \\|  |)| | |  |\\    |  |  /   /)")
    call append(11," #             '//||\\\\`          |  `---. |  '-'  /  '  '-' ' |  | \\   |  `-/   /`")
    call append(12," #               ''``            `------' `------'    `-----' `--'  `--'    `--'")
    call append(13," # ######################################################################################")
    call append(14," #")
    call append(15," # Author: edony - edonyzpc@gmail.com")
    call append(16," #")
    call append(17," # twitter : @edonyzpc")
    call append(18," #")
    call append(19," # Last modified: ".strftime("%Y-%m-%d %H:%M"))
    call append(20," #")
    call append(21," # Filename: ".expand("%:t"))
    call append(22," #")
    call append(23," # Description: All Rights Are Reserved")
    call append(24," #")
    call append(25,"\"\"\"")
endfunction
function CTitle()
    call append(0, " /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
    call append(1, " #        .---.         .-----------")
    call append(2, " #       /     \\  __  /    ------")
    call append(3, " #      / /     \\(  )/    -----   (`-')  _ _(`-')              <-. (`-')_")
    call append(4, " #     //////    '\\/ `   ---      ( OO).-/( (OO ).->     .->      \\( OO) )     .->")
    call append(5, " #    //// / //  \:   \: ---      (,------. \\    .'_ (`-')----. ,--./ ,--/  ,--.'  ,-.")
    call append(6, " #   // /   /  / `\\/ \'--         |  .---' '`'-..__)( OO).-. ' |   \\ |  | (`-')'.'  /")
    call append(7, " #  //          //\.\.\\\\          (|  '--.  |  |  ' |( _) | | | |  . '|  |)(OO \\    /")
    call append(8, " # ============UU====UU====      |  .--'  |  |  / : \\|  |)| | |  |\\    |  |  /   /)")
    call append(9, " #             '//||\\\\`          |  `---. |  '-'  /  '  '-' ' |  | \\   |  `-/   /`")
    call append(10, " #               ''``            `------' `------'    `-----' `--'  `--'    `--'")
    call append(11, " # ######################################################################################")
    call append(12, " #")
    call append(13, " # Author: edony - edonyzpc@gmail.com")
    call append(14, " #")
    call append(15, " # twitter : @edonyzpc")
    call append(16, " #")
    call append(17, " # Last modified: ".strftime("%Y-%m-%d %H:%M"))
    call append(18, " #")
    call append(19, " # Filename: ".expand("%:t"))
    call append(20, " #")
    call append(21, " # Description: All Rights Are Reserved")
    call append(22, " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/")
    call append(23, "#include <iostream>")
    call append(24, "")
    call append(25, "using std::cout;")
    call append(26, "using std::cin;")
    call append(27, "using std::endl;")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction
function LuaTitle()
    call append(0,"#!/usr/bin/env lua")
    call append(1,"--[[-*- coding: utf-8 -*-")
    call append(2," #        .---.         .-----------")
    call append(3," #       /     \\  __  /    ------")
    call append(4," #      / /     \\(  )/    -----   (`-')  _ _(`-')              <-. (`-')_")
    call append(5," #     //////    '\\/ `   ---      ( OO).-/( (OO ).->     .->      \\( OO) )     .->")
    call append(6," #    //// / //  \:   \: ---      (,------. \\    .'_ (`-')----. ,--./ ,--/  ,--.'  ,-.")
    call append(7," #   // /   /  / `\\/ \'--         |  .---' '`'-..__)( OO).-. ' |   \\ |  | (`-')'.'  /")
    call append(8," #  //          //\.\.\\\\          (|  '--.  |  |  ' |( _) | | | |  . '|  |)(OO \\    /")
    call append(9," # ============UU====UU====      |  .--'  |  |  / : \\|  |)| | |  |\\    |  |  /   /)")
    call append(10," #             '//||\\\\`          |  `---. |  '-'  /  '  '-' ' |  | \\   |  `-/   /`")
    call append(11," #               ''``            `------' `------'    `-----' `--'  `--'    `--'")
    call append(12," # ######################################################################################")
    call append(13," #")
    call append(14," # Author: edony - edonyzpc@gmail.com")
    call append(15," #")
    call append(16," # twitter : @edonyzpc")
    call append(17," #")
    call append(18," # Last modified: ".strftime("%Y-%m-%d %H:%M"))
    call append(19," #")
    call append(20," # Filename: ".expand("%:t"))
    call append(21," #")
    call append(22," # Description: All Rights Are Reserved")
    call append(23,"--]]")
endfunction
